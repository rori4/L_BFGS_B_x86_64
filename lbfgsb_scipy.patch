--- lbfgsb.f	2024-09-18 22:54:09.525285195 +0300
+++ lbfgsb_patched.f	2024-09-18 22:54:23.977402677 +0300
@@ -1,8 +1,3 @@
-c                                                                                      
-c  L-BFGS-B is released under the “New BSD License” (aka “Modified BSD License”        
-c  or “3-clause license”)                                                              
-c  Please read attached file License.txt                                               
-c                                        
 c===========   L-BFGS-B (version 3.0.  April 25, 2011  ===================
 c
 c     This is a modified version of L-BFGS-B. Minor changes in the updated 
@@ -45,11 +40,11 @@
 c                                                 
 c============================================================================= 
       subroutine setulb(n, m, x, l, u, nbd, f, g, factr, pgtol, wa, iwa,
-     +                 task, iprint, csave, lsave, isave, dsave)
+     +                 task, iprint, csave, lsave, isave, dsave, maxls)
  
       character*60     task, csave
       logical          lsave(4)
-      integer          n, m, iprint, 
+      integer          n, m, iprint, maxls,
      +                 nbd(n), iwa(3*n), isave(44)
       double precision f, factr, pgtol, x(n), l(n), u(n), g(n),
 c
@@ -140,8 +135,7 @@
 c        iprint=99   print details of every iteration except n-vectors;
 c        iprint=100  print also the changes of active set and final x;
 c        iprint>100  print details of every iteration including x and g;
-c       When iprint > 0, the file iterate.dat will be created to
-c                        summarize the iteration.
+c       
 c
 c     csave is a working string of characters of length 60.
 c
@@ -276,7 +270,7 @@
      +  wa(lwn),wa(lsnd),wa(lz),wa(lr),wa(ld),wa(lt),wa(lxp),
      +  wa(lwa),
      +  iwa(1),iwa(n+1),iwa(2*n+1),task,iprint, 
-     +  csave,lsave,isave(22),dsave)
+     +  csave,lsave,isave(22),dsave, maxls)
 
       return
 
@@ -287,12 +281,13 @@
       subroutine mainlb(n, m, x, l, u, nbd, f, g, factr, pgtol, ws, wy,
      +                  sy, ss, wt, wn, snd, z, r, d, t, xp, wa, 
      +                  index, iwhere, indx2, task,
-     +                  iprint, csave, lsave, isave, dsave)
+     +                  iprint, csave, lsave, isave, dsave, maxls)
       implicit none
       character*60     task, csave
       logical          lsave(4)
       integer          n, m, iprint, nbd(n), index(n),
-     +                 iwhere(n), indx2(n), isave(23)
+     +                 iwhere(n), indx2(n), isave(23),
+     +                 maxls
       double precision f, factr, pgtol,
      +                 x(n), l(n), u(n), g(n), z(n), r(n), d(n), t(n), 
 c-jlm-jn
@@ -426,8 +421,7 @@
 c        iprint=99   print details of every iteration except n-vectors;
 c        iprint=100  print also the changes of active set and final x;
 c        iprint>100  print details of every iteration including x and g;
-c       When iprint > 0, the file iterate.dat will be created to
-c                        summarize the iteration.
+c       
 c
 c     csave is a working string of characters of length 60.
 c
@@ -483,7 +477,7 @@
  
       logical          prjctd,cnstnd,boxed,updatd,wrk
       character*3      word
-      integer          i,k,nintol,itfile,iback,nskip,
+      integer          i,k,nintol,iback,nskip,
      +                 head,col,iter,itail,iupdat,
      +                 nseg,nfgv,info,ifun,
      +                 iword,nfree,nact,ileave,nenter
@@ -492,11 +486,13 @@
      +                 cpu1,cpu2,cachyt,sbtime,lnscht,time1,time2,
      +                 gd,gdold,stp,stpmx,time
       double precision one,zero
+      double precision dlamch
+      external         dlamch
       parameter        (one=1.0d0,zero=0.0d0)
       
       if (task .eq. 'START') then
 
-         epsmch = epsilon(one)
+         epsmch = 2 * dlamch('e')
 
          call timer(time1)
 
@@ -544,26 +540,20 @@
          word = '---'
 
 c           'info' records the termination information.
-         info = 0
-
-         itfile = 8
-         if (iprint .ge. 1) then
-c                                open a summary file 'iterate.dat'
-            open (8, file = 'iterate.dat', status = 'unknown')
-         endif            
+         info = 0          
 
 c        Check the input arguments for errors.
 
          call errclb(n,m,factr,l,u,nbd,task,info,k)
          if (task(1:5) .eq. 'ERROR') then
-            call prn3lb(n,x,f,task,iprint,info,itfile,
+            call prn3lb(n,x,f,task,iprint,info,
      +                  iter,nfgv,nintol,nskip,nact,sbgnrm,
      +                  zero,nseg,word,iback,stp,xstep,k,
      +                  cachyt,sbtime,lnscht)
             return
          endif
 
-         call prn1lb(n,m,l,u,x,iprint,itfile,epsmch)
+         call prn1lb(n,m,l,u,x,iprint,epsmch)
  
 c        Initialize iwhere & project x onto the feasible set.
  
@@ -580,7 +570,6 @@
          updatd = lsave(4)
 
          nintol = isave(1)
-         itfile = isave(3)
          iback  = isave(4)
          nskip  = isave(5)
          head   = isave(6)
@@ -646,7 +635,6 @@
   
       if (iprint .ge. 1) then
          write (6,1002) iter,f,sbgnrm
-         write (itfile,1003) iter,nfgv,sbgnrm,f
       endif
       if (sbgnrm .le. pgtol) then
 c                                terminate the algorithm.
@@ -681,7 +669,7 @@
      +            iprint, sbgnrm, info, epsmch)
       if (info .ne. 0) then 
 c         singular triangular system detected; refresh the lbfgs memory.
-         if(iprint .ge. 1) write (6, 1005)
+         if(iprint .ge. 1) write (0, 1005)
          info   = 0
          col    = 0
          head   = 1
@@ -729,7 +717,7 @@
       if (info .ne. 0) then
 c          nonpositive definiteness in Cholesky factorization;
 c          refresh the lbfgs memory and restart the iteration.
-         if(iprint .ge. 1) write (6, 1006)
+         if(iprint .ge. 1) write (0, 1006)
          info   = 0
          col    = 0
          head   = 1
@@ -755,7 +743,7 @@
       if (info .ne. 0) then 
 c          singular triangular system detected;
 c          refresh the lbfgs memory and restart the iteration.
-         if(iprint .ge. 1) write (6, 1005)
+         if(iprint .ge. 1) write (0, 1005)
          info   = 0
          col    = 0
          head   = 1
@@ -786,8 +774,8 @@
  666  continue
       call lnsrlb(n,l,u,nbd,x,f,fold,gd,gdold,g,d,r,t,z,stp,dnorm,
      +            dtd,xstep,stpmx,iter,ifun,iback,nfgv,info,task,
-     +            boxed,cnstnd,csave,isave(22),dsave(17))
-      if (info .ne. 0 .or. iback .ge. 20) then
+     +            boxed,cnstnd,csave,isave(22),dsave(17), iprint)
+      if (info .ne. 0 .or. iback .ge. maxls) then
 c          restore the previous iterate.
          call dcopy(n,t,1,x,1)
          call dcopy(n,r,1,g,1)
@@ -806,7 +794,7 @@
             goto 999
          else
 c             refresh the lbfgs memory and restart the iteration.
-            if(iprint .ge. 1) write (6, 1008)
+            if(iprint .ge. 1) write (0, 1008)
             if (info .eq. 0) nfgv = nfgv - 1
             info   = 0
             col    = 0
@@ -834,7 +822,7 @@
  
 c        Print iteration information.
 
-         call prn2lb(n,x,f,g,iprint,itfile,iter,nfgv,nact,
+         call prn2lb(n,x,f,g,iprint,iter,nfgv,nact,
      +               sbgnrm,nseg,word,iword,iback,stp,xstep)
          goto 1000
       endif
@@ -904,7 +892,7 @@
       if (info .ne. 0) then 
 c          nonpositive definiteness in Cholesky factorization;
 c          refresh the lbfgs memory and restart the iteration.
-         if(iprint .ge. 1) write (6, 1007)
+         if(iprint .ge. 1) write (0, 1007)
          info = 0
          col = 0
          head = 1
@@ -927,7 +915,7 @@
  999  continue
       call timer(time2)
       time = time2 - time1
-      call prn3lb(n,x,f,task,iprint,info,itfile,
+      call prn3lb(n,x,f,task,iprint,info,
      +            iter,nfgv,nintol,nskip,nact,sbgnrm,
      +            time,nseg,word,iback,stp,xstep,k,
      +            cachyt,sbtime,lnscht)
@@ -940,8 +928,7 @@
       lsave(3)  = boxed
       lsave(4)  = updatd
 
-      isave(1)  = nintol 
-      isave(3)  = itfile 
+      isave(1)  = nintol
       isave(4)  = iback 
       isave(5)  = nskip 
       isave(6)  = head 
@@ -1087,10 +1074,10 @@
   20  continue
 
       if (iprint .ge. 0) then
-         if (prjctd) write (6,*)
+         if (prjctd) write (0,*)
      +   'The initial X is infeasible.  Restart with its projection.'
          if (.not. cnstnd)
-     +      write (6,*) 'This problem is unconstrained.'
+     +      write (0,*) 'This problem is unconstrained.'
       endif
 
       if (iprint .gt. 0) write (6,1001) nbdd
@@ -1361,8 +1348,7 @@
 c        iprint=99   print details of every iteration except n-vectors;
 c        iprint=100  print also the changes of active set and final x;
 c        iprint>100  print details of every iteration including x and g;
-c       When iprint > 0, the file iterate.dat will be created to
-c                        summarize the iteration.
+c       
 c
 c     sbgnrm is a double precision variable.
 c       On entry sbgnrm is the norm of the projected gradient at x.
@@ -2453,12 +2439,12 @@
       subroutine lnsrlb(n, l, u, nbd, x, f, fold, gd, gdold, g, d, r, t,
      +                  z, stp, dnorm, dtd, xstep, stpmx, iter, ifun,
      +                  iback, nfgv, info, task, boxed, cnstnd, csave,
-     +                  isave, dsave)
+     +                  isave, dsave, iprint)
 
       character*60     task, csave
       logical          boxed, cnstnd
       integer          n, iter, ifun, iback, nfgv, info,
-     +                 nbd(n), isave(2)
+     +                 nbd(n), isave(2), iprint
       double precision f, fold, gd, gdold, stp, dnorm, dtd, xstep,
      +                 stpmx, x(n), l(n), u(n), g(n), d(n), r(n), t(n),
      +                 z(n), dsave(13)
@@ -2470,6 +2456,10 @@
 c       to perform the line search.  Subroutine dscrch is safeguarded so
 c       that all trial points lie within the feasible region.
 c
+c     Be mindful that the dcsrch subroutine being called is a copy in
+c       this file (lbfgsb.f) and NOT in the Minpack2 copy distributed
+c       by scipy.
+c      
 c     Subprograms called:
 c
 c       Minpack2 Library ... dcsrch.
@@ -2550,7 +2540,9 @@
          if (gd .ge. zero) then
 c                               the directional derivative >=0.
 c                               Line search is impossible.
-            write(6,*)' ascent direction in projection gd = ', gd
+            if (iprint .ge. 0) then
+                write(0,*)' ascent direction in projection gd = ', gd
+            endif
             info = -4
             return
          endif
@@ -2567,8 +2559,11 @@
          if (stp .eq. one) then
             call dcopy(n,z,1,x,1)
          else
+c        take step and prevent rounding error beyond bound
             do 41 i = 1, n
                x(i) = stp*d(i) + t(i)
+               if (nbd(i).eq.1.or.nbd(i).eq.2) x(i) = max(x(i), l(i))
+               if (nbd(i).eq.2.or.nbd(i).eq.3) x(i) = min(x(i), u(i))
   41        continue
          endif
       else
@@ -2668,9 +2663,9 @@
 
 c======================= The end of matupd =============================
 
-      subroutine prn1lb(n, m, l, u, x, iprint, itfile, epsmch)
+      subroutine prn1lb(n, m, l, u, x, iprint, epsmch)
  
-      integer n, m, iprint, itfile
+      integer n, m, iprint
       double precision epsmch, x(n), l(n), u(n)
 
 c     ************
@@ -2700,9 +2695,6 @@
          write (6,7001) epsmch
          write (6,*) 'N = ',n,'    M = ',m
          if (iprint .ge. 1) then
-            write (itfile,2001) epsmch
-            write (itfile,*)'N = ',n,'    M = ',m
-            write (itfile,9001)
             if (iprint .gt. 100) then
                write (6,1004) 'L =',(l(i),i = 1,n)
                write (6,1004) 'X0 =',(x(i),i = 1,n)
@@ -2739,11 +2731,11 @@
 
 c======================= The end of prn1lb =============================
 
-      subroutine prn2lb(n, x, f, g, iprint, itfile, iter, nfgv, nact, 
+      subroutine prn2lb(n, x, f, g, iprint, iter, nfgv, nact, 
      +                  sbgnrm, nseg, word, iword, iback, stp, xstep)
  
       character*3      word
-      integer          n, iprint, itfile, iter, nfgv, nact, nseg,
+      integer          n, iprint, iter, nfgv, nact, nseg,
      +                 iword, iback
       double precision f, sbgnrm, stp, xstep, x(n), g(n)
 
@@ -2793,8 +2785,7 @@
          imod = mod(iter,iprint)
          if (imod .eq. 0) write (6,2001) iter,f,sbgnrm
       endif
-      if (iprint .ge. 1) write (itfile,3001)
-     +          iter,nfgv,nseg,nact,word,iback,stp,xstep,sbgnrm,f
+      
 
  1004 format (/,a4, 1p, 6(1x,d11.4),/,(4x,1p,6(1x,d11.4)))
  2001 format
@@ -2807,14 +2798,14 @@
 
 c======================= The end of prn2lb =============================
 
-      subroutine prn3lb(n, x, f, task, iprint, info, itfile, 
+      subroutine prn3lb(n, x, f, task, iprint, info, 
      +                  iter, nfgv, nintol, nskip, nact, sbgnrm, 
      +                  time, nseg, word, iback, stp, xstep, k, 
      +                  cachyt, sbtime, lnscht)
  
       character*60     task
       character*3      word
-      integer          n, iprint, info, itfile, iter, nfgv, nintol,
+      integer          n, iprint, info, iter, nfgv, nintol,
      +                 nskip, nact, nseg, iback, k
       double precision f, sbgnrm, time, stp, xstep, cachyt, sbtime,
      +                 lnscht, x(n)
@@ -2857,35 +2848,16 @@
       if (iprint .ge. 0) then
          write (6,3009) task
          if (info .ne. 0) then
-            if (info .eq. -1) write (6,9011)
-            if (info .eq. -2) write (6,9012)
-            if (info .eq. -3) write (6,9013)
-            if (info .eq. -4) write (6,9014)
-            if (info .eq. -5) write (6,9015)
-            if (info .eq. -6) write (6,*)' Input nbd(',k,') is invalid.'
+            if (info .eq. -1) write (0,9011)
+            if (info .eq. -2) write (0,9012)
+            if (info .eq. -3) write (0,9013)
+            if (info .eq. -4) write (0,9014)
+            if (info .eq. -5) write (0,9015)
+            if (info .eq. -6) write (0,*)' Input nbd(',k,') is invalid.'
             if (info .eq. -7) 
      +      write (6,*)' l(',k,') > u(',k,').  No feasible solution.'
-            if (info .eq. -8) write (6,9018)
-            if (info .eq. -9) write (6,9019)
-         endif
-         if (iprint .ge. 1) write (6,3007) cachyt,sbtime,lnscht
-         write (6,3008) time
-         if (iprint .ge. 1) then
-            if (info .eq. -4 .or. info .eq. -9) then
-               write (itfile,3002)
-     +             iter,nfgv,nseg,nact,word,iback,stp,xstep
-            endif
-            write (itfile,3009) task
-            if (info .ne. 0) then
-               if (info .eq. -1) write (itfile,9011)
-               if (info .eq. -2) write (itfile,9012)
-               if (info .eq. -3) write (itfile,9013)
-               if (info .eq. -4) write (itfile,9014)
-               if (info .eq. -5) write (itfile,9015)
-               if (info .eq. -8) write (itfile,9018)
-               if (info .eq. -9) write (itfile,9019)
-            endif
-            write (itfile,3008) time
+            if (info .eq. -8) write (0,9018)
+            if (info .eq. -9) write (0,9019)
          endif
       endif
 
@@ -3144,8 +3116,7 @@
 c        iprint=99   print details of every iteration except n-vectors;
 c        iprint=100  print also the changes of active set and final x;
 c        iprint>100  print details of every iteration including x and g;
-c       When iprint > 0, the file iterate.dat will be created to
-c                        summarize the iteration.
+c       
 c
 c     info is an integer variable.
 c       On entry info is unspecified.
@@ -3279,8 +3250,10 @@
  55   continue
       if ( dd_p .gt.zero ) then
          call dcopy( n, xp, 1, x, 1 )
-         write(6,*) ' Positive dir derivative in projection '
-         write(6,*) ' Using the backtracking step '
+         if (iprint .ge. 0) then
+            write(6,*) ' Positive dir derivative in projection '
+            write(6,*) ' Using the backtracking step '
+         endif
       else
          go to 911
       endif
